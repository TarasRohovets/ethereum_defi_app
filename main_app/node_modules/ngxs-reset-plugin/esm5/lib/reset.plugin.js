/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetService } from './reset.service';
import { getMetaData, StateClear, StateOverwrite, StateReset, StateResetAll, } from './symbols';
var NgxsResetPlugin = /** @class */ (function () {
    function NgxsResetPlugin(resetService) {
        this.resetService = resetService;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    NgxsResetPlugin.prototype.clearStates = /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    function (state, statesToKeep) {
        return statesToKeep
            .map((/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) { return getPath(meta); }))
            .map((/**
         * @param {?} path
         * @return {?}
         */
        function (path) { return ({
            parts: path.split('.'),
            value: getValue(state, path),
        }); }))
            .reduce((/**
         * @param {?} obj
         * @param {?} __1
         * @return {?}
         */
        function (obj, _a) {
            var parts = _a.parts, value = _a.value;
            return parts.reduceRight((/**
             * @param {?} acc
             * @param {?} part
             * @return {?}
             */
            function (acc, part) {
                var _a, _b;
                return part in obj
                    ? (_a = {},
                        _a[part] = tslib_1.__assign({}, obj[part], acc),
                        _a) : (_b = {}, _b[part] = acc, _b);
            }), value);
        }), (/** @type {?} */ ({})));
    };
    /**
     * @private
     * @param {?} state
     * @param {?} statesToOverwrite
     * @param {?} values
     * @return {?}
     */
    NgxsResetPlugin.prototype.overwriteStates = /**
     * @private
     * @param {?} state
     * @param {?} statesToOverwrite
     * @param {?} values
     * @return {?}
     */
    function (state, statesToOverwrite, values) {
        statesToOverwrite.forEach((/**
         * @param {?} meta
         * @param {?} index
         * @return {?}
         */
        function (meta, index) { return (state = setValue(state, getPath(meta), values[index])); }));
        return state;
    };
    /**
     * @private
     * @param {?} state
     * @param {?} statesToReset
     * @return {?}
     */
    NgxsResetPlugin.prototype.resetStates = /**
     * @private
     * @param {?} state
     * @param {?} statesToReset
     * @return {?}
     */
    function (state, statesToReset) {
        var _this = this;
        statesToReset.forEach((/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) {
            state = setValue(state, getPath(meta), typeof meta.defaults === 'undefined' ? {} : meta.defaults);
            if (meta.children) {
                state = _this.resetStates(state, (/** @type {?} */ (meta.children.map(getMetaData))));
            }
        }));
        return state;
    };
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    NgxsResetPlugin.prototype.resetStatesAll = /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    function (state, statesToKeep) {
        /** @type {?} */
        var values = statesToKeep.map((/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) { return getValue(state, getPath(meta)); }));
        return this.overwriteStates(this.resetService.initialState, statesToKeep, values);
    };
    /**
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    NgxsResetPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    function (state, action, next) {
        /** @type {?} */
        var type = getActionTypeFromInstance(action);
        switch (type) {
            case StateClear.type:
                state = this.clearStates(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateReset.type:
                state = this.resetStates(state, ((/** @type {?} */ (action))).statesToReset);
                break;
            case StateResetAll.type:
                state = this.resetStatesAll(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateOverwrite.type:
                var _a = (/** @type {?} */ (action)), statesToOverwrite = _a.statesToOverwrite, values = _a.values;
                state = this.overwriteStates(state, statesToOverwrite, values);
                break;
            default:
                break;
        }
        return next(state, action);
    };
    NgxsResetPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsResetPlugin.ctorParameters = function () { return [
        { type: ResetService }
    ]; };
    return NgxsResetPlugin;
}());
export { NgxsResetPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsResetPlugin.prototype.resetService;
}
/**
 * @param {?} meta
 * @return {?}
 */
function getPath(meta) {
    return meta.path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQucGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4cy1yZXNldC1wbHVnaW4vIiwic291cmNlcyI6WyJsaWIvcmVzZXQucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsUUFBUSxFQUFjLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV4RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLFdBQVcsRUFDWCxVQUFVLEVBQ1YsY0FBYyxFQUNkLFVBQVUsRUFDVixhQUFhLEdBQ2QsTUFBTSxXQUFXLENBQUM7QUFFbkI7SUFFRSx5QkFBNkIsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBRyxDQUFDOzs7Ozs7O0lBRW5ELHFDQUFXOzs7Ozs7SUFBbkIsVUFBb0IsS0FBVSxFQUFFLFlBQTZCO1FBQzNELE9BQU8sWUFBWTthQUNoQixHQUFHOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQWIsQ0FBYSxFQUFDO2FBQzFCLEdBQUc7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUM7WUFDWixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDdEIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1NBQzdCLENBQUMsRUFIVyxDQUdYLEVBQUM7YUFDRixNQUFNOzs7OztRQUNMLFVBQUMsR0FBRyxFQUFFLEVBQWdCO2dCQUFkLGdCQUFLLEVBQUUsZ0JBQUs7WUFDbEIsT0FBQSxLQUFLLENBQUMsV0FBVzs7Ozs7WUFDZixVQUFDLEdBQUcsRUFBRSxJQUFJOztnQkFDUixPQUFBLElBQUksSUFBSSxHQUFHO29CQUNULENBQUM7d0JBQ0csR0FBQyxJQUFJ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QkFDL0QsTUFBTTtZQUVSO2dCQUNFLE1BQU07U0FDVDtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDOztnQkExRkYsVUFBVTs7OztnQkFURixZQUFZOztJQW9HckIsc0JBQUM7Q0FBQSxBQTNGRCxJQTJGQztTQTFGWSxlQUFlOzs7Ozs7SUFDZCx1Q0FBMkM7Ozs7OztBQTJGekQsU0FBUyxPQUFPLENBQUMsSUFBbUI7SUFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlLCBnZXRWYWx1ZSwgTmd4c1BsdWdpbiwgc2V0VmFsdWUgfSBmcm9tICdAbmd4cy9zdG9yZSc7XG5pbXBvcnQgeyBNZXRhRGF0YU1vZGVsIH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xuaW1wb3J0IHsgUmVzZXRTZXJ2aWNlIH0gZnJvbSAnLi9yZXNldC5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIGdldE1ldGFEYXRhLFxuICBTdGF0ZUNsZWFyLFxuICBTdGF0ZU92ZXJ3cml0ZSxcbiAgU3RhdGVSZXNldCxcbiAgU3RhdGVSZXNldEFsbCxcbn0gZnJvbSAnLi9zeW1ib2xzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neHNSZXNldFBsdWdpbiBpbXBsZW1lbnRzIE5neHNQbHVnaW4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHJlc2V0U2VydmljZTogUmVzZXRTZXJ2aWNlKSB7fVxuXG4gIHByaXZhdGUgY2xlYXJTdGF0ZXMoc3RhdGU6IGFueSwgc3RhdGVzVG9LZWVwOiBNZXRhRGF0YU1vZGVsW10pOiBhbnkge1xuICAgIHJldHVybiBzdGF0ZXNUb0tlZXBcbiAgICAgIC5tYXAobWV0YSA9PiBnZXRQYXRoKG1ldGEpKVxuICAgICAgLm1hcChwYXRoID0+ICh7XG4gICAgICAgIHBhcnRzOiBwYXRoLnNwbGl0KCcuJyksXG4gICAgICAgIHZhbHVlOiBnZXRWYWx1ZShzdGF0ZSwgcGF0aCksXG4gICAgICB9KSlcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChvYmosIHsgcGFydHMsIHZhbHVlIH0pID0+XG4gICAgICAgICAgcGFydHMucmVkdWNlUmlnaHQoXG4gICAgICAgICAgICAoYWNjLCBwYXJ0KSA9PlxuICAgICAgICAgICAgICBwYXJ0IGluIG9ialxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICBbcGFydF06IHtcbiAgICAgICAgICAgICAgICAgICAgICAuLi5vYmpbcGFydF0sXG4gICAgICAgICAgICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogeyBbcGFydF06IGFjYyB9LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgKSxcbiAgICAgICAge30gYXMgYW55LFxuICAgICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgb3ZlcndyaXRlU3RhdGVzKFxuICAgIHN0YXRlOiBhbnksXG4gICAgc3RhdGVzVG9PdmVyd3JpdGU6IE1ldGFEYXRhTW9kZWxbXSxcbiAgICB2YWx1ZXM6IGFueVtdLFxuICApOiBhbnkge1xuICAgIHN0YXRlc1RvT3ZlcndyaXRlLmZvckVhY2goXG4gICAgICAobWV0YSwgaW5kZXgpID0+IChzdGF0ZSA9IHNldFZhbHVlKHN0YXRlLCBnZXRQYXRoKG1ldGEpLCB2YWx1ZXNbaW5kZXhdKSksXG4gICAgKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0U3RhdGVzKHN0YXRlOiBhbnksIHN0YXRlc1RvUmVzZXQ6IE1ldGFEYXRhTW9kZWxbXSk6IGFueSB7XG4gICAgc3RhdGVzVG9SZXNldC5mb3JFYWNoKG1ldGEgPT4ge1xuICAgICAgc3RhdGUgPSBzZXRWYWx1ZShcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGdldFBhdGgobWV0YSksXG4gICAgICAgIHR5cGVvZiBtZXRhLmRlZmF1bHRzID09PSAndW5kZWZpbmVkJyA/IHt9IDogbWV0YS5kZWZhdWx0cyxcbiAgICAgICk7XG5cbiAgICAgIGlmIChtZXRhLmNoaWxkcmVuKSB7XG4gICAgICAgIHN0YXRlID0gdGhpcy5yZXNldFN0YXRlcyhzdGF0ZSwgbWV0YS5jaGlsZHJlbi5tYXAoXG4gICAgICAgICAgZ2V0TWV0YURhdGEsXG4gICAgICAgICkgYXMgTWV0YURhdGFNb2RlbFtdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIHByaXZhdGUgcmVzZXRTdGF0ZXNBbGwoc3RhdGU6IGFueSwgc3RhdGVzVG9LZWVwOiBNZXRhRGF0YU1vZGVsW10pOiBhbnkge1xuICAgIGNvbnN0IHZhbHVlcyA9IHN0YXRlc1RvS2VlcC5tYXAobWV0YSA9PiBnZXRWYWx1ZShzdGF0ZSwgZ2V0UGF0aChtZXRhKSkpO1xuXG4gICAgcmV0dXJuIHRoaXMub3ZlcndyaXRlU3RhdGVzKHRoaXMucmVzZXRTZXJ2aWNlLmluaXRpYWxTdGF0ZSwgc3RhdGVzVG9LZWVwLCB2YWx1ZXMpO1xuICB9XG5cbiAgaGFuZGxlKHN0YXRlOiBhbnksIGFjdGlvbjogYW55LCBuZXh0OiBhbnkpIHtcbiAgICBjb25zdCB0eXBlID0gZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZShhY3Rpb24pO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFN0YXRlQ2xlYXIudHlwZTpcbiAgICAgICAgc3RhdGUgPSB0aGlzLmNsZWFyU3RhdGVzKHN0YXRlLCAoYWN0aW9uIGFzIFN0YXRlQ2xlYXIpLnN0YXRlc1RvS2VlcCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0YXRlUmVzZXQudHlwZTpcbiAgICAgICAgc3RhdGUgPSB0aGlzLnJlc2V0U3RhdGVzKHN0YXRlLCAoYWN0aW9uIGFzIFN0YXRlUmVzZXQpLnN0YXRlc1RvUmVzZXQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdGF0ZVJlc2V0QWxsLnR5cGU6XG4gICAgICAgIHN0YXRlID0gdGhpcy5yZXNldFN0YXRlc0FsbChzdGF0ZSwgKGFjdGlvbiBhcyBTdGF0ZVJlc2V0QWxsKS5zdGF0ZXNUb0tlZXApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdGF0ZU92ZXJ3cml0ZS50eXBlOlxuICAgICAgICBjb25zdCB7IHN0YXRlc1RvT3ZlcndyaXRlLCB2YWx1ZXMgfSA9IGFjdGlvbiBhcyBTdGF0ZU92ZXJ3cml0ZTtcbiAgICAgICAgc3RhdGUgPSB0aGlzLm92ZXJ3cml0ZVN0YXRlcyhzdGF0ZSwgc3RhdGVzVG9PdmVyd3JpdGUsIHZhbHVlcyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dChzdGF0ZSwgYWN0aW9uKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYXRoKG1ldGE6IE1ldGFEYXRhTW9kZWwpOiBzdHJpbmcge1xuICByZXR1cm4gbWV0YS5wYXRoO1xufVxuIl19