/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Actions, InitState, ofActionSuccessful, Store, UpdateState } from '@ngxs/store';
import { take } from 'rxjs/operators';
import { ResetService } from './reset.service';
var ResetHandler = /** @class */ (function () {
    function ResetHandler(actions$, store, resetService) {
        var _this = this;
        this.actions$ = actions$;
        this.store = store;
        this.resetService = resetService;
        this.actions$
            .pipe(ofActionSuccessful(InitState), take(1))
            .subscribe((/**
         * @return {?}
         */
        function () { return (_this.resetService.initialState = _this.store.snapshot()); }));
        this.actions$.pipe(ofActionSuccessful(UpdateState)).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var addedStates = _a.addedStates;
            return (_this.resetService.initialState = tslib_1.__assign({}, _this.resetService.initialState, addedStates));
        }));
    }
    ResetHandler.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ResetHandler.ctorParameters = function () { return [
        { type: Actions },
        { type: Store },
        { type: ResetService }
    ]; };
    return ResetHandler;
}());
export { ResetHandler };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.actions$;
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.store;
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.resetService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neHMtcmVzZXQtcGx1Z2luLyIsInNvdXJjZXMiOlsibGliL3Jlc2V0LmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUVFLHNCQUNVLFFBQWlCLEVBQ2pCLEtBQVksRUFDWixZQUEwQjtRQUhwQyxpQkFtQkM7UUFsQlMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixVQUFLLEdBQUwsS0FBSyxDQUFPO1FBQ1osaUJBQVksR0FBWixZQUFZLENBQWM7UUFFbEMsSUFBSSxDQUFDLFFBQVE7YUFDVixJQUFJLENBQ0gsa0JBQWtCLENBQUMsU0FBUyxDQUFDLEVBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUjthQUNBLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBeEQsQ0FBd0QsRUFBQyxDQUFDO1FBRTdFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUzs7OztRQUMzRCxVQUFDLEVBQWU7Z0JBQWIsNEJBQVc7WUFDWixPQUFBLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLHdCQUMxQixLQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFDOUIsV0FBVyxDQUNmLENBQUM7UUFIRixDQUdFLEVBQ0wsQ0FBQztJQUNKLENBQUM7O2dCQXJCRixVQUFVOzs7O2dCQUpGLE9BQU87Z0JBQWlDLEtBQUs7Z0JBRTdDLFlBQVk7O0lBd0JyQixtQkFBQztDQUFBLEFBdEJELElBc0JDO1NBckJZLFlBQVk7Ozs7OztJQUVyQixnQ0FBeUI7Ozs7O0lBQ3pCLDZCQUFvQjs7Ozs7SUFDcEIsb0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgSW5pdFN0YXRlLCBvZkFjdGlvblN1Y2Nlc3NmdWwsIFN0b3JlLCBVcGRhdGVTdGF0ZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXNldFNlcnZpY2UgfSBmcm9tICcuL3Jlc2V0LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVzZXRIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIHN0b3JlOiBTdG9yZSxcbiAgICBwcml2YXRlIHJlc2V0U2VydmljZTogUmVzZXRTZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLmFjdGlvbnMkXG4gICAgICAucGlwZShcbiAgICAgICAgb2ZBY3Rpb25TdWNjZXNzZnVsKEluaXRTdGF0ZSksXG4gICAgICAgIHRha2UoMSksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+ICh0aGlzLnJlc2V0U2VydmljZS5pbml0aWFsU3RhdGUgPSB0aGlzLnN0b3JlLnNuYXBzaG90KCkpKTtcblxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShvZkFjdGlvblN1Y2Nlc3NmdWwoVXBkYXRlU3RhdGUpKS5zdWJzY3JpYmUoXG4gICAgICAoeyBhZGRlZFN0YXRlcyB9KSA9PlxuICAgICAgICAodGhpcy5yZXNldFNlcnZpY2UuaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICAgIC4uLnRoaXMucmVzZXRTZXJ2aWNlLmluaXRpYWxTdGF0ZSxcbiAgICAgICAgICAuLi5hZGRlZFN0YXRlcyxcbiAgICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl19