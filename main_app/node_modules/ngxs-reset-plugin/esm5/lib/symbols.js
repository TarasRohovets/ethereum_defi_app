/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isDevMode } from '@angular/core';
import { getStoreMetadata } from '@ngxs/store';
/**
 * Action to clear all state except given state(s)
 */
var StateClear = /** @class */ (function () {
    function StateClear() {
        var statesToKeep = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            statesToKeep[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaDataListReducer(isDevMode());
        this.statesToKeep = statesToKeep.reduce(reducer, []);
    }
    StateClear.type = '@@CLEAR_STATE';
    return StateClear;
}());
export { StateClear };
if (false) {
    /** @type {?} */
    StateClear.type;
    /** @type {?} */
    StateClear.prototype.statesToKeep;
}
/**
 * Action to reset given state(s) to defaults
 */
var StateReset = /** @class */ (function () {
    function StateReset() {
        var statesToReset = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            statesToReset[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaDataListReducer(isDevMode());
        this.statesToReset = statesToReset.reduce(reducer, []);
    }
    StateReset.type = '@@RESET_STATE';
    return StateReset;
}());
export { StateReset };
if (false) {
    /** @type {?} */
    StateReset.type;
    /** @type {?} */
    StateReset.prototype.statesToReset;
}
/**
 * Action to reset all states expect given state(s) to defaults
 */
var StateResetAll = /** @class */ (function () {
    function StateResetAll() {
        var statesToKeep = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            statesToKeep[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaDataListReducer(isDevMode());
        this.statesToKeep = statesToKeep.reduce(reducer, []);
    }
    StateResetAll.type = '@@RESET_STATE_ALL';
    return StateResetAll;
}());
export { StateResetAll };
if (false) {
    /** @type {?} */
    StateResetAll.type;
    /** @type {?} */
    StateResetAll.prototype.statesToKeep;
}
/**
 * Action to overwrite state(s) with given value(s)
 */
var StateOverwrite = /** @class */ (function () {
    function StateOverwrite() {
        var overwriteConfigs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            overwriteConfigs[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaTupleReducer(isDevMode());
        var _a = tslib_1.__read(overwriteConfigs.reduce(reducer, [
            [],
            [],
        ]), 2), states = _a[0], values = _a[1];
        this.statesToOverwrite = states;
        this.values = values;
    }
    StateOverwrite.type = '@@OVERWRITE_STATE';
    return StateOverwrite;
}());
export { StateOverwrite };
if (false) {
    /** @type {?} */
    StateOverwrite.type;
    /** @type {?} */
    StateOverwrite.prototype.statesToOverwrite;
    /** @type {?} */
    StateOverwrite.prototype.values;
}
/**
 * @param {?} state
 * @param {?} devMode
 * @return {?}
 */
export function getMetaData(state, devMode) {
    /** @type {?} */
    var meta = (/** @type {?} */ (new Object(getStoreMetadata((/** @type {?} */ (state))))));
    /** @type {?} */
    var isNgxsMeta = meta.name && 'defaults' in meta;
    // Reusability Hack: devMode is number on purpose
    if (!isNgxsMeta && devMode === -2) {
        console.warn("Reset Plugin Warning: " + meta.name + " is not a state class.");
        return null;
    }
    return meta;
}
/**
 * @param {?} devMode
 * @return {?}
 */
function createMetaDataListReducer(devMode) {
    return (/**
     * @param {?} acc
     * @param {?} state
     * @return {?}
     */
    function (acc, state) {
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        var meta = getMetaData(state, ~devMode);
        return meta ? acc.concat(meta) : acc;
    });
}
/**
 * @param {?} devMode
 * @return {?}
 */
function createMetaTupleReducer(devMode) {
    return (/**
     * @param {?} acc
     * @param {?} __1
     * @return {?}
     */
    function (acc, _a) {
        var _b = tslib_1.__read(_a, 2), state = _b[0], value = _b[1];
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        var meta = getMetaData(state, ~devMode);
        return meta ? [acc[0].concat(meta), acc[1].concat(value)] : acc;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neHMtcmVzZXQtcGx1Z2luLyIsInNvdXJjZXMiOlsibGliL3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7OztBQWlCL0M7SUFRRTtRQUFZLHNCQUE2QjthQUE3QixVQUE2QixFQUE3QixxQkFBNkIsRUFBN0IsSUFBNkI7WUFBN0IsaUNBQTZCOzs7WUFDakMsT0FBTyxHQUFHLHlCQUF5QixDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBa0IsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFWZSxlQUFJLEdBQUcsZUFBZSxDQUFDO0lBV3pDLGlCQUFDO0NBQUEsQUFaRCxJQVlDO1NBWlksVUFBVTs7O0lBQ3JCLGdCQUF1Qzs7SUFDdkMsa0NBQThDOzs7OztBQWVoRDtJQUdFO1FBQVksdUJBQThCO2FBQTlCLFVBQThCLEVBQTlCLHFCQUE4QixFQUE5QixJQUE4QjtZQUE5QixrQ0FBOEI7OztZQUNsQyxPQUFPLEdBQUcseUJBQXlCLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFrQixPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUxlLGVBQUksR0FBRyxlQUFlLENBQUM7SUFNekMsaUJBQUM7Q0FBQSxBQVBELElBT0M7U0FQWSxVQUFVOzs7SUFDckIsZ0JBQXVDOztJQUN2QyxtQ0FBK0M7Ozs7O0FBVWpEO0lBUUU7UUFBWSxzQkFBNkI7YUFBN0IsVUFBNkIsRUFBN0IscUJBQTZCLEVBQTdCLElBQTZCO1lBQTdCLGlDQUE2Qjs7O1lBQ2pDLE9BQU8sR0FBRyx5QkFBeUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQWtCLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBVmUsa0JBQUksR0FBRyxtQkFBbUIsQ0FBQztJQVc3QyxvQkFBQztDQUFBLEFBWkQsSUFZQztTQVpZLGFBQWE7OztJQUN4QixtQkFBMkM7O0lBQzNDLHFDQUE4Qzs7Ozs7QUFlaEQ7SUFJRTtRQUFZLDBCQUFxQzthQUFyQyxVQUFxQyxFQUFyQyxxQkFBcUMsRUFBckMsSUFBcUM7WUFBckMscUNBQXFDOzs7WUFDekMsT0FBTyxHQUFHLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzdDLElBQUE7OztjQUdKLEVBSEssY0FBTSxFQUFFLGNBR2I7UUFFRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFaZSxtQkFBSSxHQUFHLG1CQUFtQixDQUFDO0lBYTdDLHFCQUFDO0NBQUEsQUFkRCxJQWNDO1NBZFksY0FBYzs7O0lBQ3pCLG9CQUEyQzs7SUFDM0MsMkNBQW1EOztJQUNuRCxnQ0FBOEI7Ozs7Ozs7QUFhaEMsTUFBTSxVQUFVLFdBQVcsQ0FDekIsS0FBaUIsRUFDakIsT0FBZTs7UUFFVCxJQUFJLEdBQUcsbUJBQUEsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsbUJBQUEsS0FBSyxFQUFPLENBQUMsQ0FBQyxFQUFpQjs7UUFDbEUsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksVUFBVSxJQUFJLElBQUk7SUFFbEQsaURBQWlEO0lBQ2pELElBQUksQ0FBQyxVQUFVLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQXlCLElBQUksQ0FBQyxJQUFJLDJCQUF3QixDQUFDLENBQUM7UUFDekUsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQzs7Ozs7QUFFRCxTQUFTLHlCQUF5QixDQUFDLE9BQWdCO0lBQ2pEOzs7OztJQUFPLFVBQUMsR0FBb0IsRUFBRSxLQUFpQjs7O1lBRXZDLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDO1FBRXpDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDdkMsQ0FBQyxFQUFDO0FBQ0osQ0FBQzs7Ozs7QUFFRCxTQUFTLHNCQUFzQixDQUFDLE9BQWdCO0lBQzlDOzs7OztJQUFPLFVBQUMsR0FBYyxFQUFFLEVBQThCO1lBQTlCLDBCQUE4QixFQUE3QixhQUFLLEVBQUUsYUFBSzs7O1lBRTdCLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDO1FBRXpDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDbEUsQ0FBQyxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0U3RvcmVNZXRhZGF0YSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7IE1ldGFEYXRhTW9kZWwsIFN0YXRlQ2xhc3MgfSBmcm9tICcuL2ludGVybmFscyc7XG5cbmV4cG9ydCB0eXBlIE92ZXJ3cml0ZVR1cGxlID0gW1N0YXRlQ2xhc3MsIGFueV07XG50eXBlIE1ldGFUdXBsZSA9IFtNZXRhRGF0YU1vZGVsW10sIGFueVtdXTtcbnR5cGUgTWV0YUxpc3RSZWR1Y2VyID0gKFxuICBhY2M6IE1ldGFEYXRhTW9kZWxbXSxcbiAgc3RhdGU6IFN0YXRlQ2xhc3MsXG4pID0+IE1ldGFEYXRhTW9kZWxbXTtcbnR5cGUgTWV0YVR1cGxlUmVkdWNlciA9IChcbiAgYWNjOiBNZXRhVHVwbGUsXG4gIFtzdGF0ZSwgdmFsdWVdOiBPdmVyd3JpdGVUdXBsZSxcbikgPT4gTWV0YVR1cGxlO1xuXG4vKipcbiAqIEFjdGlvbiB0byBjbGVhciBhbGwgc3RhdGUgZXhjZXB0IGdpdmVuIHN0YXRlKHMpXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGF0ZUNsZWFyIHtcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGUgPSAnQEBDTEVBUl9TVEFURSc7XG4gIHB1YmxpYyByZWFkb25seSBzdGF0ZXNUb0tlZXA6IE1ldGFEYXRhTW9kZWxbXTtcblxuICAvLyBUaGUgZHVwbGljYXRpb24gaXMgbmVjZXNzYXJ5IGZvciBUeXBlU2NyaXB0XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp1bmlmaWVkLXNpZ25hdHVyZXNcbiAgY29uc3RydWN0b3IoLi4uc3RhdGVzVG9LZWVwOiBTdGF0ZUNsYXNzW10pO1xuICBjb25zdHJ1Y3RvcigpO1xuICBjb25zdHJ1Y3RvciguLi5zdGF0ZXNUb0tlZXA6IFN0YXRlQ2xhc3NbXSkge1xuICAgIGNvbnN0IHJlZHVjZXIgPSBjcmVhdGVNZXRhRGF0YUxpc3RSZWR1Y2VyKGlzRGV2TW9kZSgpKTtcbiAgICB0aGlzLnN0YXRlc1RvS2VlcCA9IHN0YXRlc1RvS2VlcC5yZWR1Y2U8TWV0YURhdGFNb2RlbFtdPihyZWR1Y2VyLCBbXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBY3Rpb24gdG8gcmVzZXQgZ2l2ZW4gc3RhdGUocykgdG8gZGVmYXVsdHNcbiAqL1xuZXhwb3J0IGNsYXNzIFN0YXRlUmVzZXQge1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZSA9ICdAQFJFU0VUX1NUQVRFJztcbiAgcHVibGljIHJlYWRvbmx5IHN0YXRlc1RvUmVzZXQ6IE1ldGFEYXRhTW9kZWxbXTtcbiAgY29uc3RydWN0b3IoLi4uc3RhdGVzVG9SZXNldDogU3RhdGVDbGFzc1tdKSB7XG4gICAgY29uc3QgcmVkdWNlciA9IGNyZWF0ZU1ldGFEYXRhTGlzdFJlZHVjZXIoaXNEZXZNb2RlKCkpO1xuICAgIHRoaXMuc3RhdGVzVG9SZXNldCA9IHN0YXRlc1RvUmVzZXQucmVkdWNlPE1ldGFEYXRhTW9kZWxbXT4ocmVkdWNlciwgW10pO1xuICB9XG59XG5cbi8qKlxuICogQWN0aW9uIHRvIHJlc2V0IGFsbCBzdGF0ZXMgZXhwZWN0IGdpdmVuIHN0YXRlKHMpIHRvIGRlZmF1bHRzXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGF0ZVJlc2V0QWxsIHtcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGUgPSAnQEBSRVNFVF9TVEFURV9BTEwnO1xuICBwdWJsaWMgcmVhZG9ubHkgc3RhdGVzVG9LZWVwOiBNZXRhRGF0YU1vZGVsW107XG5cbiAgLy8gVGhlIGR1cGxpY2F0aW9uIGlzIG5lY2Vzc2FyeSBmb3IgVHlwZVNjcmlwdFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dW5pZmllZC1zaWduYXR1cmVzXG4gIGNvbnN0cnVjdG9yKC4uLnN0YXRlc1RvS2VlcDogU3RhdGVDbGFzc1tdKTtcbiAgY29uc3RydWN0b3IoKTtcbiAgY29uc3RydWN0b3IoLi4uc3RhdGVzVG9LZWVwOiBTdGF0ZUNsYXNzW10pIHtcbiAgICBjb25zdCByZWR1Y2VyID0gY3JlYXRlTWV0YURhdGFMaXN0UmVkdWNlcihpc0Rldk1vZGUoKSk7XG4gICAgdGhpcy5zdGF0ZXNUb0tlZXAgPSBzdGF0ZXNUb0tlZXAucmVkdWNlPE1ldGFEYXRhTW9kZWxbXT4ocmVkdWNlciwgW10pO1xuICB9XG59XG5cbi8qKlxuICogQWN0aW9uIHRvIG92ZXJ3cml0ZSBzdGF0ZShzKSB3aXRoIGdpdmVuIHZhbHVlKHMpXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGF0ZU92ZXJ3cml0ZSB7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlID0gJ0BAT1ZFUldSSVRFX1NUQVRFJztcbiAgcHVibGljIHJlYWRvbmx5IHN0YXRlc1RvT3ZlcndyaXRlOiBNZXRhRGF0YU1vZGVsW107XG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZXM6IGFueVtdO1xuICBjb25zdHJ1Y3RvciguLi5vdmVyd3JpdGVDb25maWdzOiBPdmVyd3JpdGVUdXBsZVtdKSB7XG4gICAgY29uc3QgcmVkdWNlciA9IGNyZWF0ZU1ldGFUdXBsZVJlZHVjZXIoaXNEZXZNb2RlKCkpO1xuICAgIGNvbnN0IFtzdGF0ZXMsIHZhbHVlc10gPSBvdmVyd3JpdGVDb25maWdzLnJlZHVjZTxNZXRhVHVwbGU+KHJlZHVjZXIsIFtcbiAgICAgIFtdLFxuICAgICAgW10sXG4gICAgXSk7XG5cbiAgICB0aGlzLnN0YXRlc1RvT3ZlcndyaXRlID0gc3RhdGVzO1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRhRGF0YShcbiAgc3RhdGU6IFN0YXRlQ2xhc3MsXG4gIGRldk1vZGU6IG51bWJlcixcbik6IE1ldGFEYXRhTW9kZWwgfCBudWxsIHtcbiAgY29uc3QgbWV0YSA9IG5ldyBPYmplY3QoZ2V0U3RvcmVNZXRhZGF0YShzdGF0ZSBhcyBhbnkpKSBhcyBNZXRhRGF0YU1vZGVsO1xuICBjb25zdCBpc05neHNNZXRhID0gbWV0YS5uYW1lICYmICdkZWZhdWx0cycgaW4gbWV0YTtcblxuICAvLyBSZXVzYWJpbGl0eSBIYWNrOiBkZXZNb2RlIGlzIG51bWJlciBvbiBwdXJwb3NlXG4gIGlmICghaXNOZ3hzTWV0YSAmJiBkZXZNb2RlID09PSAtMikge1xuICAgIGNvbnNvbGUud2FybihgUmVzZXQgUGx1Z2luIFdhcm5pbmc6ICR7bWV0YS5uYW1lfSBpcyBub3QgYSBzdGF0ZSBjbGFzcy5gKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBtZXRhO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNZXRhRGF0YUxpc3RSZWR1Y2VyKGRldk1vZGU6IGJvb2xlYW4pOiBNZXRhTGlzdFJlZHVjZXIge1xuICByZXR1cm4gKGFjYzogTWV0YURhdGFNb2RlbFtdLCBzdGF0ZTogU3RhdGVDbGFzcyk6IE1ldGFEYXRhTW9kZWxbXSA9PiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICBjb25zdCBtZXRhID0gZ2V0TWV0YURhdGEoc3RhdGUsIH5kZXZNb2RlKTtcblxuICAgIHJldHVybiBtZXRhID8gYWNjLmNvbmNhdChtZXRhKSA6IGFjYztcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWV0YVR1cGxlUmVkdWNlcihkZXZNb2RlOiBib29sZWFuKTogTWV0YVR1cGxlUmVkdWNlciB7XG4gIHJldHVybiAoYWNjOiBNZXRhVHVwbGUsIFtzdGF0ZSwgdmFsdWVdOiBPdmVyd3JpdGVUdXBsZSk6IE1ldGFUdXBsZSA9PiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICBjb25zdCBtZXRhID0gZ2V0TWV0YURhdGEoc3RhdGUsIH5kZXZNb2RlKTtcblxuICAgIHJldHVybiBtZXRhID8gW2FjY1swXS5jb25jYXQobWV0YSksIGFjY1sxXS5jb25jYXQodmFsdWUpXSA6IGFjYztcbiAgfTtcbn1cbiJdfQ==