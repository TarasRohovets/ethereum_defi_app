import { Injectable, isDevMode, APP_INITIALIZER, NgModule } from '@angular/core';
import { ofActionSuccessful, InitState, UpdateState, Actions, Store, getStoreMetadata, getValue, setValue, getActionTypeFromInstance, NGXS_PLUGINS } from '@ngxs/store';
import { __assign, __read } from 'tslib';
import { take } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function noop() {
    return (/**
     * @return {?}
     */
    function () { });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResetService = /** @class */ (function () {
    function ResetService() {
    }
    ResetService.decorators = [
        { type: Injectable }
    ];
    return ResetService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResetHandler = /** @class */ (function () {
    function ResetHandler(actions$, store, resetService) {
        var _this = this;
        this.actions$ = actions$;
        this.store = store;
        this.resetService = resetService;
        this.actions$
            .pipe(ofActionSuccessful(InitState), take(1))
            .subscribe((/**
         * @return {?}
         */
        function () { return (_this.resetService.initialState = _this.store.snapshot()); }));
        this.actions$.pipe(ofActionSuccessful(UpdateState)).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var addedStates = _a.addedStates;
            return (_this.resetService.initialState = __assign({}, _this.resetService.initialState, addedStates));
        }));
    }
    ResetHandler.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ResetHandler.ctorParameters = function () { return [
        { type: Actions },
        { type: Store },
        { type: ResetService }
    ]; };
    return ResetHandler;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Action to clear all state except given state(s)
 */
var StateClear = /** @class */ (function () {
    function StateClear() {
        var statesToKeep = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            statesToKeep[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaDataListReducer(isDevMode());
        this.statesToKeep = statesToKeep.reduce(reducer, []);
    }
    StateClear.type = '@@CLEAR_STATE';
    return StateClear;
}());
/**
 * Action to reset given state(s) to defaults
 */
var StateReset = /** @class */ (function () {
    function StateReset() {
        var statesToReset = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            statesToReset[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaDataListReducer(isDevMode());
        this.statesToReset = statesToReset.reduce(reducer, []);
    }
    StateReset.type = '@@RESET_STATE';
    return StateReset;
}());
/**
 * Action to reset all states expect given state(s) to defaults
 */
var StateResetAll = /** @class */ (function () {
    function StateResetAll() {
        var statesToKeep = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            statesToKeep[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaDataListReducer(isDevMode());
        this.statesToKeep = statesToKeep.reduce(reducer, []);
    }
    StateResetAll.type = '@@RESET_STATE_ALL';
    return StateResetAll;
}());
/**
 * Action to overwrite state(s) with given value(s)
 */
var StateOverwrite = /** @class */ (function () {
    function StateOverwrite() {
        var overwriteConfigs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            overwriteConfigs[_i] = arguments[_i];
        }
        /** @type {?} */
        var reducer = createMetaTupleReducer(isDevMode());
        var _a = __read(overwriteConfigs.reduce(reducer, [
            [],
            [],
        ]), 2), states = _a[0], values = _a[1];
        this.statesToOverwrite = states;
        this.values = values;
    }
    StateOverwrite.type = '@@OVERWRITE_STATE';
    return StateOverwrite;
}());
/**
 * @param {?} state
 * @param {?} devMode
 * @return {?}
 */
function getMetaData(state, devMode) {
    /** @type {?} */
    var meta = (/** @type {?} */ (new Object(getStoreMetadata((/** @type {?} */ (state))))));
    /** @type {?} */
    var isNgxsMeta = meta.name && 'defaults' in meta;
    // Reusability Hack: devMode is number on purpose
    if (!isNgxsMeta && devMode === -2) {
        console.warn("Reset Plugin Warning: " + meta.name + " is not a state class.");
        return null;
    }
    return meta;
}
/**
 * @param {?} devMode
 * @return {?}
 */
function createMetaDataListReducer(devMode) {
    return (/**
     * @param {?} acc
     * @param {?} state
     * @return {?}
     */
    function (acc, state) {
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        var meta = getMetaData(state, ~devMode);
        return meta ? acc.concat(meta) : acc;
    });
}
/**
 * @param {?} devMode
 * @return {?}
 */
function createMetaTupleReducer(devMode) {
    return (/**
     * @param {?} acc
     * @param {?} __1
     * @return {?}
     */
    function (acc, _a) {
        var _b = __read(_a, 2), state = _b[0], value = _b[1];
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        var meta = getMetaData(state, ~devMode);
        return meta ? [acc[0].concat(meta), acc[1].concat(value)] : acc;
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsResetPlugin = /** @class */ (function () {
    function NgxsResetPlugin(resetService) {
        this.resetService = resetService;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    NgxsResetPlugin.prototype.clearStates = /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    function (state, statesToKeep) {
        return statesToKeep
            .map((/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) { return getPath(meta); }))
            .map((/**
         * @param {?} path
         * @return {?}
         */
        function (path) { return ({
            parts: path.split('.'),
            value: getValue(state, path),
        }); }))
            .reduce((/**
         * @param {?} obj
         * @param {?} __1
         * @return {?}
         */
        function (obj, _a) {
            var parts = _a.parts, value = _a.value;
            return parts.reduceRight((/**
             * @param {?} acc
             * @param {?} part
             * @return {?}
             */
            function (acc, part) {
                var _a, _b;
                return part in obj
                    ? (_a = {},
                        _a[part] = __assign({}, obj[part], acc),
                        _a) : (_b = {}, _b[part] = acc, _b);
            }), value);
        }), (/** @type {?} */ ({})));
    };
    /**
     * @private
     * @param {?} state
     * @param {?} statesToOverwrite
     * @param {?} values
     * @return {?}
     */
    NgxsResetPlugin.prototype.overwriteStates = /**
     * @private
     * @param {?} state
     * @param {?} statesToOverwrite
     * @param {?} values
     * @return {?}
     */
    function (state, statesToOverwrite, values) {
        statesToOverwrite.forEach((/**
         * @param {?} meta
         * @param {?} index
         * @return {?}
         */
        function (meta, index) { return (state = setValue(state, getPath(meta), values[index])); }));
        return state;
    };
    /**
     * @private
     * @param {?} state
     * @param {?} statesToReset
     * @return {?}
     */
    NgxsResetPlugin.prototype.resetStates = /**
     * @private
     * @param {?} state
     * @param {?} statesToReset
     * @return {?}
     */
    function (state, statesToReset) {
        var _this = this;
        statesToReset.forEach((/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) {
            state = setValue(state, getPath(meta), typeof meta.defaults === 'undefined' ? {} : meta.defaults);
            if (meta.children) {
                state = _this.resetStates(state, (/** @type {?} */ (meta.children.map(getMetaData))));
            }
        }));
        return state;
    };
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    NgxsResetPlugin.prototype.resetStatesAll = /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    function (state, statesToKeep) {
        /** @type {?} */
        var values = statesToKeep.map((/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) { return getValue(state, getPath(meta)); }));
        return this.overwriteStates(this.resetService.initialState, statesToKeep, values);
    };
    /**
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    NgxsResetPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    function (state, action, next) {
        /** @type {?} */
        var type = getActionTypeFromInstance(action);
        switch (type) {
            case StateClear.type:
                state = this.clearStates(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateReset.type:
                state = this.resetStates(state, ((/** @type {?} */ (action))).statesToReset);
                break;
            case StateResetAll.type:
                state = this.resetStatesAll(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateOverwrite.type:
                var _a = (/** @type {?} */ (action)), statesToOverwrite = _a.statesToOverwrite, values = _a.values;
                state = this.overwriteStates(state, statesToOverwrite, values);
                break;
            default:
                break;
        }
        return next(state, action);
    };
    NgxsResetPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsResetPlugin.ctorParameters = function () { return [
        { type: ResetService }
    ]; };
    return NgxsResetPlugin;
}());
/**
 * @param {?} meta
 * @return {?}
 */
function getPath(meta) {
    return meta.path;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsResetPluginModule = /** @class */ (function () {
    function NgxsResetPluginModule() {
    }
    /**
     * @return {?}
     */
    NgxsResetPluginModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxsResetPluginModule,
            providers: [
                ResetService,
                ResetHandler,
                {
                    provide: APP_INITIALIZER,
                    useFactory: noop,
                    deps: [ResetHandler],
                    multi: true,
                },
                {
                    provide: NGXS_PLUGINS,
                    useClass: NgxsResetPlugin,
                    multi: true,
                },
            ],
        };
    };
    NgxsResetPluginModule.decorators = [
        { type: NgModule }
    ];
    return NgxsResetPluginModule;
}());

export { NgxsResetPlugin, NgxsResetPluginModule, StateClear, StateOverwrite, StateReset, StateResetAll, getMetaData, ResetService as ɵa, ResetHandler as ɵb, noop as ɵd };
//# sourceMappingURL=ngxs-reset-plugin.js.map
