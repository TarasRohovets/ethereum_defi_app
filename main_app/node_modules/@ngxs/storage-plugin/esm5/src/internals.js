/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isPlatformServer } from '@angular/common';
import { StateToken } from '@ngxs/store';
/**
 * If the `key` option is not provided then the below constant
 * will be used as a default key
 * @type {?}
 */
export var DEFAULT_STATE_KEY = '@@STATE';
/**
 * This key is used to retrieve static metadatas on state classes.
 * This constant is taken from the core codebase
 * @type {?}
 */
var META_OPTIONS_KEY = 'NGXS_OPTIONS_META';
/**
 * @param {?} key
 * @return {?}
 */
function transformKeyOption(key) {
    if (!Array.isArray(key)) {
        key = [key];
    }
    return key.map((/**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        if (typeof token === 'string') {
            return token;
        }
        else if (token instanceof StateToken) {
            return token.getName();
        }
        /** @type {?} */
        var options = ((/** @type {?} */ (token)))[META_OPTIONS_KEY];
        return options.name;
    }));
}
/**
 * @param {?} options
 * @return {?}
 */
export function storageOptionsFactory(options) {
    if (options !== undefined && options.key) {
        options.key = transformKeyOption(options.key);
    }
    return tslib_1.__assign({ key: [DEFAULT_STATE_KEY], storage: 0 /* LocalStorage */, serialize: JSON.stringify, deserialize: JSON.parse, beforeSerialize: (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { return obj; }), afterDeserialize: (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { return obj; }) }, options);
}
/**
 * @param {?} options
 * @param {?} platformId
 * @return {?}
 */
export function engineFactory(options, platformId) {
    if (isPlatformServer(platformId)) {
        return null;
    }
    if (options.storage === 0 /* LocalStorage */) {
        return localStorage;
    }
    else if (options.storage === 1 /* SessionStorage */) {
        return sessionStorage;
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmFnZS1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7Ozs7O0FBUXpDLE1BQU0sS0FBTyxpQkFBaUIsR0FBRyxTQUFTOzs7Ozs7SUFnQnBDLGdCQUFnQixHQUFHLG1CQUFtQjs7Ozs7QUFFNUMsU0FBUyxrQkFBa0IsQ0FBQyxHQUFlO0lBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2I7SUFFRCxPQUFPLEdBQUcsQ0FBQyxHQUFHOzs7O0lBQUMsVUFBQyxLQUE0QztRQUMxRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixPQUFPLEtBQUssQ0FBQztTQUNkO2FBQU0sSUFBSSxLQUFLLFlBQVksVUFBVSxFQUFFO1lBQ3RDLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3hCOztZQUVLLE9BQU8sR0FBRyxDQUFDLG1CQUFBLEtBQUssRUFBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7UUFDaEQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3RCLENBQUMsRUFBQyxDQUFDO0FBQ0wsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLE9BQTZDO0lBRTdDLElBQUksT0FBTyxLQUFLLFNBQVMsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO1FBQ3hDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQy9DO0lBRUQsMEJBQ0UsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFDeEIsT0FBTyx3QkFDUCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFDekIsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQ3ZCLGVBQWU7Ozs7UUFBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsRUFBSCxDQUFHLEdBQzNCLGdCQUFnQjs7OztRQUFFLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxFQUFILENBQUcsS0FDekIsT0FBTyxFQUNWO0FBQ0osQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsT0FBaUMsRUFDakMsVUFBa0I7SUFFbEIsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNoQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsSUFBSSxPQUFPLENBQUMsT0FBTyx5QkFBK0IsRUFBRTtRQUNsRCxPQUFPLFlBQVksQ0FBQztLQUNyQjtTQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sMkJBQWlDLEVBQUU7UUFDM0QsT0FBTyxjQUFjLENBQUM7S0FDdkI7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgU3RhdGVDbGFzcyB9IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XHJcbmltcG9ydCB7IFN0YXRlVG9rZW4gfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBTdG9yYWdlT3B0aW9uLCBTdG9yYWdlRW5naW5lLCBOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMgfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5cclxuLyoqXHJcbiAqIElmIHRoZSBga2V5YCBvcHRpb24gaXMgbm90IHByb3ZpZGVkIHRoZW4gdGhlIGJlbG93IGNvbnN0YW50XHJcbiAqIHdpbGwgYmUgdXNlZCBhcyBhIGRlZmF1bHQga2V5XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TVEFURV9LRVkgPSAnQEBTVEFURSc7XHJcblxyXG4vKipcclxuICogSW50ZXJuYWwgdHlwZSBkZWZpbml0aW9uIGZvciB0aGUgYGtleWAgb3B0aW9uIHByb3ZpZGVkXHJcbiAqIGluIHRoZSBgZm9yUm9vdGAgbWV0aG9kIHdoZW4gaW1wb3J0aW5nIG1vZHVsZVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3RvcmFnZUtleSA9XHJcbiAgfCBzdHJpbmdcclxuICB8IFN0YXRlQ2xhc3NcclxuICB8IFN0YXRlVG9rZW48YW55PlxyXG4gIHwgKHN0cmluZyB8IFN0YXRlQ2xhc3MgfCBTdGF0ZVRva2VuPGFueT4pW107XHJcblxyXG4vKipcclxuICogVGhpcyBrZXkgaXMgdXNlZCB0byByZXRyaWV2ZSBzdGF0aWMgbWV0YWRhdGFzIG9uIHN0YXRlIGNsYXNzZXMuXHJcbiAqIFRoaXMgY29uc3RhbnQgaXMgdGFrZW4gZnJvbSB0aGUgY29yZSBjb2RlYmFzZVxyXG4gKi9cclxuY29uc3QgTUVUQV9PUFRJT05TX0tFWSA9ICdOR1hTX09QVElPTlNfTUVUQSc7XHJcblxyXG5mdW5jdGlvbiB0cmFuc2Zvcm1LZXlPcHRpb24oa2V5OiBTdG9yYWdlS2V5KTogc3RyaW5nW10ge1xyXG4gIGlmICghQXJyYXkuaXNBcnJheShrZXkpKSB7XHJcbiAgICBrZXkgPSBba2V5XTtcclxuICB9XHJcblxyXG4gIHJldHVybiBrZXkubWFwKCh0b2tlbjogc3RyaW5nIHwgU3RhdGVDbGFzcyB8IFN0YXRlVG9rZW48YW55PikgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgcmV0dXJuIHRva2VuO1xyXG4gICAgfSBlbHNlIGlmICh0b2tlbiBpbnN0YW5jZW9mIFN0YXRlVG9rZW4pIHtcclxuICAgICAgcmV0dXJuIHRva2VuLmdldE5hbWUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gKHRva2VuIGFzIGFueSlbTUVUQV9PUFRJT05TX0tFWV07XHJcbiAgICByZXR1cm4gb3B0aW9ucy5uYW1lO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RvcmFnZU9wdGlvbnNGYWN0b3J5KFxyXG4gIG9wdGlvbnM6IE5neHNTdG9yYWdlUGx1Z2luT3B0aW9ucyB8IHVuZGVmaW5lZFxyXG4pOiBOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMge1xyXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5rZXkpIHtcclxuICAgIG9wdGlvbnMua2V5ID0gdHJhbnNmb3JtS2V5T3B0aW9uKG9wdGlvbnMua2V5KTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBrZXk6IFtERUZBVUxUX1NUQVRFX0tFWV0sXHJcbiAgICBzdG9yYWdlOiBTdG9yYWdlT3B0aW9uLkxvY2FsU3RvcmFnZSxcclxuICAgIHNlcmlhbGl6ZTogSlNPTi5zdHJpbmdpZnksXHJcbiAgICBkZXNlcmlhbGl6ZTogSlNPTi5wYXJzZSxcclxuICAgIGJlZm9yZVNlcmlhbGl6ZTogb2JqID0+IG9iaixcclxuICAgIGFmdGVyRGVzZXJpYWxpemU6IG9iaiA9PiBvYmosXHJcbiAgICAuLi5vcHRpb25zXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVuZ2luZUZhY3RvcnkoXHJcbiAgb3B0aW9uczogTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zLFxyXG4gIHBsYXRmb3JtSWQ6IHN0cmluZ1xyXG4pOiBTdG9yYWdlRW5naW5lIHwgbnVsbCB7XHJcbiAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIocGxhdGZvcm1JZCkpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9wdGlvbnMuc3RvcmFnZSA9PT0gU3RvcmFnZU9wdGlvbi5Mb2NhbFN0b3JhZ2UpIHtcclxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XHJcbiAgfSBlbHNlIGlmIChvcHRpb25zLnN0b3JhZ2UgPT09IFN0b3JhZ2VPcHRpb24uU2Vzc2lvblN0b3JhZ2UpIHtcclxuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsO1xyXG59XHJcbiJdfQ==