/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformServer } from '@angular/common';
import { StateToken } from '@ngxs/store';
/**
 * If the `key` option is not provided then the below constant
 * will be used as a default key
 * @type {?}
 */
export const DEFAULT_STATE_KEY = '@@STATE';
/**
 * This key is used to retrieve static metadatas on state classes.
 * This constant is taken from the core codebase
 * @type {?}
 */
const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';
/**
 * @param {?} key
 * @return {?}
 */
function transformKeyOption(key) {
    if (!Array.isArray(key)) {
        key = [key];
    }
    return key.map((/**
     * @param {?} token
     * @return {?}
     */
    (token) => {
        if (typeof token === 'string') {
            return token;
        }
        else if (token instanceof StateToken) {
            return token.getName();
        }
        /** @type {?} */
        const options = ((/** @type {?} */ (token)))[META_OPTIONS_KEY];
        return options.name;
    }));
}
/**
 * @param {?} options
 * @return {?}
 */
export function storageOptionsFactory(options) {
    if (options !== undefined && options.key) {
        options.key = transformKeyOption(options.key);
    }
    return Object.assign({ key: [DEFAULT_STATE_KEY], storage: 0 /* LocalStorage */, serialize: JSON.stringify, deserialize: JSON.parse, beforeSerialize: (/**
         * @param {?} obj
         * @return {?}
         */
        obj => obj), afterDeserialize: (/**
         * @param {?} obj
         * @return {?}
         */
        obj => obj) }, options);
}
/**
 * @param {?} options
 * @param {?} platformId
 * @return {?}
 */
export function engineFactory(options, platformId) {
    if (isPlatformServer(platformId)) {
        return null;
    }
    if (options.storage === 0 /* LocalStorage */) {
        return localStorage;
    }
    else if (options.storage === 1 /* SessionStorage */) {
        return sessionStorage;
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmFnZS1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDOzs7Ozs7QUFRekMsTUFBTSxPQUFPLGlCQUFpQixHQUFHLFNBQVM7Ozs7OztNQWdCcEMsZ0JBQWdCLEdBQUcsbUJBQW1COzs7OztBQUU1QyxTQUFTLGtCQUFrQixDQUFDLEdBQWU7SUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdkIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDYjtJQUVELE9BQU8sR0FBRyxDQUFDLEdBQUc7Ozs7SUFBQyxDQUFDLEtBQTRDLEVBQUUsRUFBRTtRQUM5RCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixPQUFPLEtBQUssQ0FBQztTQUNkO2FBQU0sSUFBSSxLQUFLLFlBQVksVUFBVSxFQUFFO1lBQ3RDLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3hCOztjQUVLLE9BQU8sR0FBRyxDQUFDLG1CQUFBLEtBQUssRUFBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7UUFDaEQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3RCLENBQUMsRUFBQyxDQUFDO0FBQ0wsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLE9BQTZDO0lBRTdDLElBQUksT0FBTyxLQUFLLFNBQVMsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO1FBQ3hDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQy9DO0lBRUQsdUJBQ0UsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFDeEIsT0FBTyx3QkFDUCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFDekIsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQ3ZCLGVBQWU7Ozs7UUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FDM0IsZ0JBQWdCOzs7O1FBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQ3pCLE9BQU8sRUFDVjtBQUNKLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQzNCLE9BQWlDLEVBQ2pDLFVBQWtCO0lBRWxCLElBQUksZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELElBQUksT0FBTyxDQUFDLE9BQU8seUJBQStCLEVBQUU7UUFDbEQsT0FBTyxZQUFZLENBQUM7S0FDckI7U0FBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLDJCQUFpQyxFQUFFO1FBQzNELE9BQU8sY0FBYyxDQUFDO0tBQ3ZCO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFN0YXRlQ2xhc3MgfSBmcm9tICdAbmd4cy9zdG9yZS9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBTdGF0ZVRva2VuIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgU3RvcmFnZU9wdGlvbiwgU3RvcmFnZUVuZ2luZSwgTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIH0gZnJvbSAnLi9zeW1ib2xzJztcclxuXHJcbi8qKlxyXG4gKiBJZiB0aGUgYGtleWAgb3B0aW9uIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBiZWxvdyBjb25zdGFudFxyXG4gKiB3aWxsIGJlIHVzZWQgYXMgYSBkZWZhdWx0IGtleVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1RBVEVfS0VZID0gJ0BAU1RBVEUnO1xyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIHR5cGUgZGVmaW5pdGlvbiBmb3IgdGhlIGBrZXlgIG9wdGlvbiBwcm92aWRlZFxyXG4gKiBpbiB0aGUgYGZvclJvb3RgIG1ldGhvZCB3aGVuIGltcG9ydGluZyBtb2R1bGVcclxuICovXHJcbmV4cG9ydCB0eXBlIFN0b3JhZ2VLZXkgPVxyXG4gIHwgc3RyaW5nXHJcbiAgfCBTdGF0ZUNsYXNzXHJcbiAgfCBTdGF0ZVRva2VuPGFueT5cclxuICB8IChzdHJpbmcgfCBTdGF0ZUNsYXNzIHwgU3RhdGVUb2tlbjxhbnk+KVtdO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMga2V5IGlzIHVzZWQgdG8gcmV0cmlldmUgc3RhdGljIG1ldGFkYXRhcyBvbiBzdGF0ZSBjbGFzc2VzLlxyXG4gKiBUaGlzIGNvbnN0YW50IGlzIHRha2VuIGZyb20gdGhlIGNvcmUgY29kZWJhc2VcclxuICovXHJcbmNvbnN0IE1FVEFfT1BUSU9OU19LRVkgPSAnTkdYU19PUFRJT05TX01FVEEnO1xyXG5cclxuZnVuY3Rpb24gdHJhbnNmb3JtS2V5T3B0aW9uKGtleTogU3RvcmFnZUtleSk6IHN0cmluZ1tdIHtcclxuICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5KSkge1xyXG4gICAga2V5ID0gW2tleV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4ga2V5Lm1hcCgodG9rZW46IHN0cmluZyB8IFN0YXRlQ2xhc3MgfCBTdGF0ZVRva2VuPGFueT4pID0+IHtcclxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB0b2tlbjtcclxuICAgIH0gZWxzZSBpZiAodG9rZW4gaW5zdGFuY2VvZiBTdGF0ZVRva2VuKSB7XHJcbiAgICAgIHJldHVybiB0b2tlbi5nZXROYW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9ICh0b2tlbiBhcyBhbnkpW01FVEFfT1BUSU9OU19LRVldO1xyXG4gICAgcmV0dXJuIG9wdGlvbnMubmFtZTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2VPcHRpb25zRmFjdG9yeShcclxuICBvcHRpb25zOiBOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMgfCB1bmRlZmluZWRcclxuKTogTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIHtcclxuICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMua2V5KSB7XHJcbiAgICBvcHRpb25zLmtleSA9IHRyYW5zZm9ybUtleU9wdGlvbihvcHRpb25zLmtleSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAga2V5OiBbREVGQVVMVF9TVEFURV9LRVldLFxyXG4gICAgc3RvcmFnZTogU3RvcmFnZU9wdGlvbi5Mb2NhbFN0b3JhZ2UsXHJcbiAgICBzZXJpYWxpemU6IEpTT04uc3RyaW5naWZ5LFxyXG4gICAgZGVzZXJpYWxpemU6IEpTT04ucGFyc2UsXHJcbiAgICBiZWZvcmVTZXJpYWxpemU6IG9iaiA9PiBvYmosXHJcbiAgICBhZnRlckRlc2VyaWFsaXplOiBvYmogPT4gb2JqLFxyXG4gICAgLi4ub3B0aW9uc1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbmdpbmVGYWN0b3J5KFxyXG4gIG9wdGlvbnM6IE5neHNTdG9yYWdlUGx1Z2luT3B0aW9ucyxcclxuICBwbGF0Zm9ybUlkOiBzdHJpbmdcclxuKTogU3RvcmFnZUVuZ2luZSB8IG51bGwge1xyXG4gIGlmIChpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGlmIChvcHRpb25zLnN0b3JhZ2UgPT09IFN0b3JhZ2VPcHRpb24uTG9jYWxTdG9yYWdlKSB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xyXG4gIH0gZWxzZSBpZiAob3B0aW9ucy5zdG9yYWdlID09PSBTdG9yYWdlT3B0aW9uLlNlc3Npb25TdG9yYWdlKSB7XHJcbiAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG4iXX0=